classdef ageo
    %AGEO このクラスの概要をここに記述
    %   詳細説明をここに記述
    
    properties
        velocity;
        location;
        m_fuel;
        m;
        m_fuel_using;
        F_r0;
        Isp;
        heading_vector;
        mag;
        Air_resistance;
    end

    properties (Access = private)
        force;
    methods
        % Constructor
        function obj = ageo()

            obj.velocity = [0; 0; 0];
            obj.location = [0; 0; 0];
            obj.m_fuel = 0;
            obj.m = 0;
            obj.m_fuel_using = 0;
            obj.F_r0 = [0; 0; 0];
            obj.Isp = 0;
            obj.heading_vector = [0; 0; 0];
            obj.mag = 0;
            obj.Air_resistance = [0; 0; 0];
        end
        
        function obj = ...
                when_rocket_on(Weight, gravitational_acceleration, air_resistance, velocity_before, ...
                location_before, Weight_of_fuel_using, wind_speed, dt, Isp, heading_vector)
            %WHEN_ROCKET_ON この関数の概要をここに記述
            %ロケット推進がOnの時の弾道計算を行う。
            %   詳細説明をここに記述
            obj.force = [0;0;-Weight * gravitational_acceleration] - air_resistance;

            obj.velocity = velocity_before +  obj.force / Weight * dt + Isp * gravitational_acceleration * log(Weight/(Weight-Weight_of_fuel_using)) * heading_vector + wind_speed;

            obj.location = location_before + obj.velocity * dt;
        end

        function obj = ...
                when_rocket_off(Weight, gravitational_acceleration, air_resistance, velocity_before, ...
                location_before,wind_speed, dt)
            %WHEN_ROCKET_OFF この関数の概要をここに記述
            %ロケット推進がoffのときの軌道計算はここをいじる。
            %   詳細説明をここに記述
            force = [0;0;-Weight *gravitational_acceleration] - air_resistance;

            obj.velocity = velocity_before +   force / Weight * dt;

            obj.location = location_before + (obj.velocity + wind_speed) * dt;
        end

        function obj =...
                various_setting(fuel_weight_begin, fuel_weight_end, times_const,constant_weight,...
                thrust_time, total_impulse, dt)
            %　総消費燃料質量(消費される推進剤の全質量)
            obj.m_fuel = fuel_weight_begin - fuel_weight_end;
            obj.m_fuel = obj.m_fuel * times_const;%kgへの単位変換

            % 全質量/g
            obj.m = constant_weight + fuel_weight_begin;
            obj.m = obj.m * times_const;%kgへの単位変換

            %(dt)s当たりの消費燃料質量
            obj.m_fuel_using = obj.m_fuel / thrust_time * dt;

            %推力/N
            obj.F_r0 = [0;0;total_impulse / thrust_time];

            %平均比推力Isp
            obj.Isp = total_impulse / obj.m_fuel;
        end

        function obj = heading_vector_fuction(velocity)
            % 速度ベクトルを用いたヘディングベクトルの生成
            obj.mag = sqrt(sum(velocity.^2));
            obj.heading_vector =  velocity / obj.mag;
        end

        function obj = air_resistance(drag_coefficient, rho, velocity, cross_sectional_area)
            % 空気抵抗
            obj.air_resistance = 0.5 * drag_coefficient * rho * sqrt(sum(velocity.^2)) * velocity * cross_sectional_area;

        end

    end
end

